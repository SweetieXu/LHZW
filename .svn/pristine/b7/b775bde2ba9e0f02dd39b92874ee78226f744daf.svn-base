@using Asiatek.Model
@using Asiatek.TMS.Helpers
@using Asiatek.Resource
@model MapRegionsEditModel

<style>
    .datepickerDateClass,.datepickerTimeClass{
        width:100px;
    }
    .button-group {
	    position: absolute;
	    bottom: 30px;
	    right: 65px;
	    font-size: 12px;
	    padding: 10px;
    }

    #rgDrawBtn {
        z-index:3;
        position:absolute;
        height: 28px;
        width:60px;
	    background-color: #0D9BF2;
	    color: #FFF;
	    border: 0;
	    outline: none;
	    border-radius: 3px;
	    margin-bottom: 4px;
	    cursor: pointer;
    }
</style>


@using (Ajax.BeginForm("EditMapRegions", "MapRegions", new AjaxOptions()
{
    OnSuccess = "showCommonEditResult",
}, new { id = "frmEditMapRegions" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.ID)
    <table class="table table-striped table-condensed table-hover">
        <tbody>
            <tr>
                <td>@Html.LabelForRequired(m => m.RegionsType)：</td>
                <td colspan="2">
                    @Html.HiddenFor(m => m.RegionsType)
                    @Html.DropDownListFor(m => m.RegionsType, Model.RegionsTypeSelectList, new { disabled = "disabled" })
                </td>
                <td rowspan="8">
                    <div id="editContainer" style="width:600px;height:400px;">
                        <div class="button-group">
                            <input id="rgDrawBtn" onclick="mapEditRegionsDraw()" class="button" value="@UIText.Draw" type="button"/>
                        </div>
                    </div>
                    <div style="display:none;">
                        @Html.HiddenFor(m => m.CenterLatitude)
                        @Html.HiddenFor(m => m.CenterLongitude)
                        @Html.HiddenFor(m => m.Radius)
                        @Html.HiddenFor(m => m.LeftUpperLatitude)
                        @Html.HiddenFor(m => m.LeftUpperLongitude)
                        @Html.HiddenFor(m => m.RightLowerLatitude)
                        @Html.HiddenFor(m => m.RightLowerLongitude)
                        @Html.HiddenFor(m => m.PolygonList)
                        @Html.HiddenFor(m => m.RePolygonList)
                    </div>
                </td>
            </tr>
            <tr>
                <td>@Html.LabelForRequired(m => m.RegionsName)：</td>
                <td colspan="2">@Html.TextBoxFor(m => m.RegionsName)</td>
            </tr>
            <tr>
                <td></td>
                <td colspan="2">@Html.ValidationMessageFor(m => m.RegionsName)</td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.Periodic)：</td>
                <td colspan="2">
                    @Html.CheckBoxFor(m => m.Periodic, new { @id = "ckPeriodic" })
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.StartTime)：</td>
                <td>@Html.TextBoxFor(m => m.StartDate, new {  @id = "startDateDatepicker", @class = "datepickerDateClass" })</td>
                <td>@Html.TextBoxFor(m => m.StartTime, new { @id = "startTime", @class = "datepickerTimeClass" })</td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.EndTime)：</td>
                <td>@Html.TextBoxFor(m => m.EndDate, new {  @id = "endDateDatepicker", @class = "datepickerDateClass" })</td>
                <td>@Html.TextBoxFor(m => m.EndTime, new { @id = "endTime", @class = "datepickerTimeClass" })</td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.SpeedLimit)：</td>
                <td colspan="2">@Html.TextBoxFor(m => m.SpeedLimit)</td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.OverSpeedDuration)：</td>
                <td colspan="2">@Html.TextBoxFor(m => m.OverSpeedDuration)</td>
            </tr>
           
        </tbody>
        <tfoot>
            <tr>
                <td colspan="2">
                    <button class="btn btn-primary" title="@UIText.SaveButton"><span class="glyphicon glyphicon-ok"></span></button>
                </td>
            </tr>
        </tfoot>
    </table>
}


<script>
    var $frmEditMapRegions = $("#frmEditMapRegions");
    $frmEditMapRegions.find("input:not(:submit,:checkbox,:radio),textarea,select").addClass("form-control");
    $frmEditMapRegions.fixUnobtrusiveValidation();

    //结束时间不得早于开始时间
    $("#startDateDatepicker").datepicker({
        changeMonth: true,
        changeYear: true,
        onClose: function (selectedDate) {
            $("#endDateDatepicker").datepicker("option", "minDate", selectedDate);
        }
    });
    $("#endDateDatepicker").datepicker({
        changeMonth: true,
        changeYear: true,
        onClose: function (selectedDate) {
            $("#startDateDatepicker").datepicker("option", "maxDate", selectedDate);
        }
    });

    $(".datepickerTimeClass").datetimepicker({
        timeOnly: true,//只选择时间
        timeOnlyTitle: '@UIText.Choose@UIText.Time',//timeOnly为true时有效
        timeText: '@UIText.Time',
        hourText: '@UIText.Hour',
        minuteText: '@UIText.Minute',
        secondText: '@UIText.Second',
        currentText: '@UIText.Now',
        closeText: '@UIText.Complete',
        showSecond: true, //显示秒  
        timeFormat: 'HH:mm:ss' //格式化时间 
    });


    //定义map对象
    var mapObjEdit = initMap('editContainer', true, 12, null);
    //添加标尺、比例尺
    addControl(true, true, false, false, false, mapObjEdit);

    var radius;
    var center;
    var point;
    var pointPolygon;


    $(function () {
        
        if ($('#ckPeriodic').prop("checked")) {
            $(".datepickerDateClass").attr('disabled', 'true');
        }
        else {
            $(".datepickerDateClass").removeAttr('disabled');
        }

        var regionsType = $("#RegionsType").val();
        //圆形
        if (regionsType == 1) {
            var tempCenterLng = $("#CenterLongitude").val();
            var tempCenterLat = $("#CenterLatitude").val();
            var tempRadius = $("#Radius").val();
            var circle = new AMap.Circle({
                map: mapObjEdit,
                center: [tempCenterLng, tempCenterLat],
                radius: tempRadius,
                fillOpacity: 0.3,
                fillColor: "#0D9BF2",
                strokeWeight: 2,
                strokeColor: "#0D9BF2"
            });
            //设置地图显示中心为圆心
            mapObjEdit.setCenter([tempCenterLng, tempCenterLat]);
        }
        //矩形
        if (regionsType == 2) {
            var tempLeftLat = $("#LeftUpperLatitude").val();
            var tempLeftLng = $("#LeftUpperLongitude").val();
            var tempRightLat = $("#RightLowerLatitude").val();
            var tempRightLng = $("#RightLowerLongitude").val();
            var rectArr = new Array();//多边形覆盖物节点坐标数组
            rectArr.push([tempLeftLng, tempLeftLat]);
            rectArr.push([tempLeftLng, tempRightLat]);
            rectArr.push([tempRightLng, tempRightLat]);
            rectArr.push([tempRightLng, tempLeftLat]);
            var rect = new AMap.Polygon({
                map: mapObjEdit,
                path: rectArr,
                fillOpacity: 0.3,
                fillColor: "#0D9BF2",
                strokeWeight: 2,
                strokeColor: "#0D9BF2"
            });
            //设置地图显示中心为四个点均值点
            var centerLng = tempLeftLng / 2 + tempRightLng / 2;
            var centerLat = tempLeftLat / 2 + tempRightLat / 2;
            mapObjEdit.setCenter([centerLng, centerLat]);
        }
        if (regionsType == 3) {//多边形
            var tempPolygonList = $("#RePolygonList").val();
            var points = tempPolygonList.split(",");
            var polygonArr = new Array();//多边形覆盖物节点坐标数组
            for (var i = 0; i < points.length-1; i++) {
                polygonArr.push([points[i], points[i + 1]]);
                i++;
            }
            $("#PolygonList").val(polygonArr);
            var polygon = new AMap.Polygon({
                map: mapObjEdit,
                path: polygonArr,
                fillOpacity: 0.3,
                fillColor: "#0D9BF2",
                strokeWeight: 2,
                strokeColor: "#0D9BF2"
            });
            //设置地图显示中心为多个点平均值点
            var totalLng = 0;
            var totalLat = 0;
            for (var j = 0; j < polygonArr.length; j++) {
                totalLng += polygonArr[j].getLng();
                totalLat += polygonArr[j].getLat();
            }
            var centerLng = totalLng / polygonArr.length;
            var centerLat = totalLat / polygonArr.length;
            mapObjEdit.setCenter([centerLng, centerLat]);
        }
    });


    //区域绘制
    function mapEditRegionsDraw() {
        var regionsType = $("#RegionsType").val();
        //圆形
        if (regionsType == 1) {
            mapObjEdit.clearMap();
            mapObjEdit.plugin(["AMap.MouseTool"], function () {
                var mousetoolCircle = new AMap.MouseTool(mapObjEdit);
                mousetoolCircle.circle();
                AMap.event.addListener(mousetoolCircle, "draw", function (e) {
                    radius = e.obj.getRadius();
                    center = e.obj.getCenter();
                    mousetoolCircle.close(false);

                    $("#CenterLatitude").val(center.getLat());
                    $("#CenterLongitude").val(center.getLng());
                    $("#Radius").val(radius); //半径单位:米
                });
            });
        }
        //矩形
        if (regionsType == 2) {
            mapObjEdit.clearMap();
            mapObjEdit.plugin(["AMap.MouseTool"], function () {
                var mousetoolRect = new AMap.MouseTool(mapObjEdit);
                mousetoolRect.rectangle();
                AMap.event.addListener(mousetoolRect, "draw", function (e) {
                    point = e.obj.getPath();//array
                    mousetoolRect.close(false);

                    //左上角经度数值小，纬度数值大；右下角经度数值大，纬度数值小。
                    var leftUpperLatitude;
                    var leftUpperLongitude;
                    var rightLowerLatitude;
                    var rightLowerLongitude;
                    if (point[0].getLat() > point[2].getLat()) {
                        leftUpperLatitude = point[0].getLat();
                        rightLowerLatitude = point[2].getLat();
                    } else {
                        leftUpperLatitude = point[2].getLat();
                        rightLowerLatitude = point[0].getLat();
                    }
                    if (point[0].getLng() < point[2].getLng()) {
                        leftUpperLongitude = point[0].getLng();
                        rightLowerLongitude = point[2].getLng();
                    } else {
                        leftUpperLongitude = point[2].getLng();
                        rightLowerLongitude = point[0].getLng();
                    }
                    $("#LeftUpperLatitude").val(leftUpperLatitude);
                    $("#LeftUpperLongitude").val(leftUpperLongitude);
                    $("#RightLowerLatitude").val(rightLowerLatitude);
                    $("#RightLowerLongitude").val(rightLowerLongitude);
                });
            });
        }
        if (regionsType == 3) {//多边形
            mapObjEdit.clearMap();
            mapObjEdit.plugin(["AMap.MouseTool"], function () {
                var mousetoolPolygon = new AMap.MouseTool(mapObjEdit);
                mousetoolPolygon.polygon();
                AMap.event.addListener(mousetoolPolygon, "draw", function (e) {
                    pointPolygon = e.obj.getPath();//array
                    mousetoolPolygon.close(false);

                    $("#PolygonList").val(pointPolygon);
                });
            });
        }
    }

    //周期选中 年月日不用输入
    $('#ckPeriodic').click(function () {
        if ($('#ckPeriodic').prop("checked")) {
            $(".datepickerDateClass").attr('disabled', 'true');
        }
        else {
            $(".datepickerDateClass").removeAttr('disabled');
        }
    });


    //验证时间
    $frmEditMapRegions.fixUnobtrusiveValidation(function (form) {
        if (checkForm()) {
            $(form).ajaxSubmit({
                success: function (responseText, statusText, xhr, $form) {
                    showCommonEditResult(responseText);
                }
            });
        }
        return false;
    });


    var checkForm = function () {
        if ($("#ckPeriodic").prop("checked") && $("#startTime").val() != "" && $("#endTime").val() != "") {
            var d1 = "2017-01-01 " + $("#startTime").val();
            var d2 = "2017-01-01 " + $("#endTime").val();
            var time1 = new Date(d1.replace("-", "/").replace("-", "/"));
            var time2 = new Date(d2.replace("-", "/").replace("-", "/"));
            if (time1 > time2) {
                var _message = '@DataAnnotations.StartTimeMoreThanEndTimeError';
                $.showPromptDialog(_message, '@UIText.InformationTitle', '@UIText.Close');
                return false;
            }
        }
        if (!$("#ckPeriodic").prop("checked") && $("#startDateDatepicker").val() != "" && $("#endDateDatepicker").val() != "" && $("#startTime").val() != "" && $("#endTime").val() != "") {
            var d1 = $("#startDateDatepicker").val() + " " + $("#startTime").val();
            var d2 = $("#endDateDatepicker").val() + " " + $("#endTime").val();
            var time1 = new Date(d1.replace("-", "/").replace("-", "/"));
            var time2 = new Date(d2.replace("-", "/").replace("-", "/"));
            if (time1 > time2) {
                var _message = '@DataAnnotations.StartTimeMoreThanEndTimeError';
                $.showPromptDialog(_message, '@UIText.InformationTitle', '@UIText.Close');
                return false;
            }
        }
        if (!$("#ckPeriodic").prop("checked") && $("#startDateDatepicker").val() == "" && $("#endDateDatepicker").val() == "" && $("#startTime").val() != "" && $("#endTime").val() != "") {
            var d1 = "2017-01-01 " + $("#startTime").val();
            var d2 = "2017-01-01 " + $("#endTime").val();
            var time1 = new Date(d1.replace("-", "/").replace("-", "/"));
            var time2 = new Date(d2.replace("-", "/").replace("-", "/"));
            if (time1 > time2) {
                var _message = '@DataAnnotations.StartTimeMoreThanEndTimeError';
                $.showPromptDialog(_message, '@UIText.InformationTitle', '@UIText.Close');
                return false;
            }
        }
        return true;
    }


</script>